fibonnaci_reg <- function(num_initial_steps){
if(num_initial_steps == 0){ return(0) }
else if(num_initial_steps == 1){ return(1) }
else{ return(fibonacci_reg(num_initial_steps - 1) + fibonacci_reg(num_initial_steps - 2)) }
}
fibonnaci_reg(7)
fibonacci_reg <- function(num_initial_steps){
if(num_initial_steps == 0){ return(0) }
else if(num_initial_steps == 1){ return(1) }
else{ return(fibonacci_reg(num_initial_steps - 1) + fibonacci_reg(num_initial_steps - 2)) }
}
fibonacci_reg(7)
fibonacci_reg <- function(fib_vec, num_initial_steps){
if(num_initial_steps == 0){
fib_vec[length(fib_vec) + 1] <- 0
return(0)
}
else if(num_initial_steps == 1){
fib_vec[length(fib_vec) + 1] <- 1
return(1)
}
else{
fib_vec[length(fib_vec) + 1] <- num_initial_steps
return(fibonacci_reg(num_initial_steps - 1) + fibonacci_reg(num_initial_steps - 2))
}
}
fibonacci_reg <- function(fib_vec, num_initial_steps){
if(num_initial_steps == 0){
fib_vec[length(fib_vec) + 1] <- 0
return(0)
}
else if(num_initial_steps == 1){
print(fib_vec)
fib_vec[length(fib_vec) + 1] <- 1
return(1)
}
else{
fib_vec[length(fib_vec) + 1] <- num_initial_steps
return(fibonacci_reg(num_initial_steps - 1) + fibonacci_reg(num_initial_steps - 2))
}
}
fibonacci_reg(c(), 7)
empty_vec <- c()
fibonacci_reg(empty_vec, 7)
fibonacci_reg <- function(fib_vec, num_initial_steps){
if(num_initial_steps == 0){
fib_vec[length(fib_vec) + 1] <- 0
return(0)
}
else if(num_initial_steps == 1){
print(fib_vec)
fib_vec[length(fib_vec) + 1] <- 1
return(1)
}
else{
fib_vec[length(fib_vec) + 1] <- num_initial_steps
return(fibonacci_reg(fib_vec, num_initial_steps - 1) + fibonacci_reg(fib_vec, num_initial_steps - 2))
}
}
fibonacci_reg(empty_vec, 7)
difftime(as.Date("2009-10-01 10:00"), as.Date("2009-10-01 9:00"), "hours")
difftime(as.Date("2009-10-01 10:00"), as.Date("2009-10-01 9:00"), units = "hours")
as.Date("2009-10-01 10:00"
as.Date("2009-10-01 10:00")
as.Date("2009-10-01 10:00")
as.POSIXct("2009-10-01 10:00", format="%m/%d/%y %H:%M")
as.POSIXct("2009-10-01 10:00", format="%y/%n/%d %H:%M")
as.POSIXct("2009-10-01 10:00", format="%y-%n-%d %H:%M")
as.POSIXt("2009-10-01 10:00", format="%y-%n-%d %H:%M")
as.POSIXct("2009-10-01 10:00", format="%y-%n-%d %H:%M")
as.POSIXct("2009-10-01 10:00", format="%yyyy-%mm-%dd %HH:%MM")
as.POSIXct(strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 01:30:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 01:30:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-09-01 01:30:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 01:30:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-09-01 01:29:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 01:30:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-09-01 01:28:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 01:30:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-09-01 01:28:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 10:00:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-09-01 09:00:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 10:00:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-10-01 09:00:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("29/12/2014 10:00:00", "%d/%m/%Y %H:%M:%S")) - as.POSIXct(strptime("29/12/2014 08:00:00", "%d/%m/%Y %H:%M:%S"))
as.POSIXct("2009-10-01 10:00:00", "%Y-%m-%d %H:%M:%S") -
as.POSIXct("2009-10-01 09:00:00", "%Y-%m-%d %H:%M:%S")
as.POSIXct("2009-10-01 10:00:00", "%Y-%m-%d %H:%M:%S") -
as.POSIXct("2009-10-01 09:00:00", "%Y-%m-%d %H:%M:%S")
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- as.dataframe(Date, Value)
dateDataframe <- as.data.frame(Date, Value)
dateDataframe <- as.data.frame(c(Date, Value))
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- as.data.frame(c(Date, Value))
dateDataframe
dateDataframe <- as.data.frame(Date, Value)
Date_Col <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value_Col <- c(0, 1, 2)
dateDataframe <- as.data.frame(Date_Col, Value_Col)
Date_Col <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value_Col <- c(0, 1, 2)
dateDataframe <- as.data.frame(Date_Col, Value_Col, row.names = NULL)
dateDataframe <- data.frame(Date_Col, Value_Col)
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe
dateDataframe%dateDifferences <- diff(dateDataframe$Date)
diff(dateDataframe$Date)
dateDifferences <- as.POSIXct(strptime(dateDataframe$Date, "%Y-%m-%d %H:%M:%S")) - as.POSIXct(strptime(dateDataframe$Date, "%Y-%m-%d %H:%M:%S"))
dateDifferences
dateDifferences <- as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) - as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S"))
dateDifferences
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDifferences <- c(0,
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) )
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe$dateDifferences <- c(0,
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) )
dateDataframe
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe$dateDifferences <- c(0,
as.string(
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) ) )
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe$dateDifferences <- c(0,
toString(
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) ) )
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe$dateDifferences <- c(0,
(
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) ) )
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe$dateDifferences <- c(0,
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) )
dateDataframe$dateDifferences[1]
dateDataframe$dateDifferences[2]
dateDataframe$dateDifferences[3]
source('~/.active-rstudio-document', echo=TRUE)
plot(BabyECG, col = "cadetblue", type = "l", main = "Baby ECG")
BabyECGwd <- wd(BabyECG, filter.number=10, family="DaubLeAsymm", type="wavelet",
bc="periodic", verbose=FALSE)
#Thresholded BabyECG
BabyECGthresh <- threshold.wd(BabyECGwd, levels = c(10, 9, 8, 7, 6, 5),
type = "hard", policy = "universal", by.level = "FALSE")
#Inverse DWT of BabyECG
fhat <- wr.wd(BabyECGthresh, start.level = 0)
plot(fhat, col = "cadetblue", type = "l", main = "Baby ECG", lwd = 1.5,
ylab = " ")
source('~/Documents/Programming/Git_Folders/Kaggle-RAOP/Updated_Attempt/RAOP_TextClassifier.R', echo=TRUE)
?trace
trace(create_matrix)
trace("create_matrix")
edit("create_matrix")
edit(create_matrix)
predictionMatrix <- create_matrix(validationTextOutputDataFrame$meta_dataframe.request_text, originalMatrix=documentTermMatrix)
predSize = length(validationTextOutputDataFrame$meta_dataframe.request_text);
edit("create_matrix")
edit(create_matrix)
predictionMatrix <- create_matrix(validationTextOutputDataFrame$meta_dataframe.request_text, originalMatrix=documentTermMatrix)
create_matrix <- edit("create_matrix")
create_matrix <- edit(create_matrix)
create_matrix <- edit(create_matrix)
edit(create_matrix)
create_matrix
predictionMatrix <- create_matrix(validationTextOutputDataFrame$meta_dataframe.request_text, originalMatrix=documentTermMatrix)
create_matrix
create_matrix()
edit(create_matrix)
library('RTextTools')
create_matrix
source('~/Documents/Programming/Git_Folders/Kaggle-RAOP/Updated_Attempt/RAOP_TextClassifier.R', echo=TRUE)
source('~/Documents/Programming/Git_Folders/Kaggle-RAOP/Updated_Attempt/RAOP_TextClassifier.R', echo=TRUE)
edit(create_matrix)
create_matrix_edited <- edit(create_matrix)
predictionMatrix <- create_matrix_edited(validationTextOutputDataFrame$meta_dataframe.request_text, originalMatrix=documentTermMatrix)
predSize = length(validationTextOutputDataFrame$meta_dataframe.request_text);
predictionContainer <- create_container(predictionMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
results
head(trainingTextOutputDataFrame)
sum(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza)
sum(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza == "TRUE")
head(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza)
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza
testDF <- trainingTextOutputDataFrame
testDF <- trainingTextOutputDataFrame[1,]
testDF
clr
wordCorpus <- Corpus(VectorSource(testDF$meta_dataframe.request_text))
wordCorpus
for_word_cloud_corpus <- Corpus(VectorSource(testDF$meta_dataframe.request_text))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stripWhitespace)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, tolower)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, PlainTextDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, stopwords("english"))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stemDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, c("[request]", "request"))
for_word_cloud_corpus
wordcloud(for_word_cloud_corpus, scale = c(4, 1), max.words = 40, colors = brewer.pal(8, "Dark2"))
clr
for_word_cloud_corpus
for_word_cloud_corpus$content
for_word_cloud_corpus$content$content
for_word_cloud_corpus[[1]]$content
test
testdf
testDF
testDF <- trainingTextOutputDataFrame[1,]
testDF <- trainingTextOutputDataFrame[1,]
for_word_cloud_corpus <- Corpus(VectorSource(testDF$meta_dataframe.request_text))
testDF <- trainingTextOutputDataFrame[1,]
for_word_cloud_corpus <- Corpus(VectorSource(testDF$meta_dataframe.request_text))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stripWhitespace)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, tolower)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, PlainTextDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, stopwords("english"))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stemDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, c("[request]", "request"))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, c("[request]", "request"))
for_word_cloud_corpus[[1]]$content
sapply(1:3, x^2)
sapply(1:3, mean)
createCoreWords <- function(plainText) {
for_word_cloud_corpus <- Corpus(VectorSource(plainText))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stripWhitespace)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, tolower)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, PlainTextDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, stopwords("english"))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stemDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, c("[request]", "request"))
}
createCoreWords(testDF$meta_dataframe.request_text)
test <- createCoreWords(testDF$meta_dataframe.request_text)
test[[1]]$content
createCoreWords <- function(plainText) {
for_word_cloud_corpus <- Corpus(VectorSource(plainText))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stripWhitespace)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, tolower)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, PlainTextDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, stopwords("english"))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stemDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, c("[request]", "request"))
for_word_cloud_corpus[[1]]$content
}
createCoreWords(testDF$meta_dataframe.request_text)
sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
clr
# Sets working directory to the relevant space and brings up the appropriate library.
# This approach will try to use text classification in R to see what makes a successful post.
# required_packages <- c("tm", "rjson", "KernSmooth", "SnowballC", "wordcloud", "httr", "XML", "RCurl", "RTextTools")
# install.packages(required_packages)
library('tm')
library('rjson')
library('KernSmooth')
library('SnowballC')
library('wordcloud')
library('httr')
library('XML')
library('RCurl')
library('RTextTools')
setwd("~/Documents/Programming/Git_Folders/Kaggle-RAOP/Updated_Attempt/Data")
#Reads in the relevant .json file
meta_data <- fromJSON(file = "train.json")
#This part just makes a nice dataframe and gives nice titles.
meta_dataframe <- data.frame("giver_username_if_known" = unlist(lapply(meta_data, function(l) l[[1]])),
"number_of_downvotes_of_request_at_retrieval" = unlist(lapply(meta_data, function(l) l[[2]])),
"number_of_upvotes_of_request_at_retrieval" = unlist(lapply(meta_data, function(l) l[[3]])),
"post_was_edited" = unlist(lapply(meta_data, function(l) l[[4]])),
"request_id" = unlist(lapply(meta_data, function(l) l[[5]])),
"request_number_of_comments_at_retrieval" = unlist(lapply(meta_data, function(l) l[[6]])),
"request_text" = unlist(lapply(meta_data, function(l) l[[7]])),
"request_text_edit_aware" = unlist(lapply(meta_data, function(l) l[[8]])),
"request_title" = unlist(lapply(meta_data, function(l) l[[9]])),
"requester_account_age_in_days_at_request" = unlist(lapply(meta_data, function(l) l[[10]])),
"requester_account_age_in_days_at_retrieval" = unlist(lapply(meta_data, function(l) l[[11]])),
"requester_days_since_first_post_on_raop_at_request" = unlist(lapply(meta_data, function(l) l[[12]])),
"requester_days_since_first_post_on_raop_at_retrieval" = unlist(lapply(meta_data, function(l) l[[13]])),
"requester_number_of_comments_at_request" = unlist(lapply(meta_data, function(l) l[[14]])),
"requester_number_of_comments_at_retrieval" = unlist(lapply(meta_data, function(l) l[[15]])),
"requester_number_of_comments_in_raop_at_request" = unlist(lapply(meta_data, function(l) l[[16]])),
"requester_number_of_comments_in_raop_at_retrieval" = unlist(lapply(meta_data, function(l) l[[17]])),
"requester_number_of_posts_at_request" = unlist(lapply(meta_data, function(l) l[[18]])),
"requester_number_of_posts_at_retrieval" = unlist(lapply(meta_data, function(l) l[[19]])),
"requester_number_of_posts_on_raop_at_request" = unlist(lapply(meta_data, function(l) l[[20]])),
"requester_number_of_posts_on_raop_at_retrieval" = unlist(lapply(meta_data, function(l) l[[21]])),
"requester_number_of_subreddits_at_request" = unlist(lapply(meta_data, function(l) l[[22]])),
"requester_received_pizza" = unlist(lapply(meta_data, function(l) l[[23]])),
"requester_upvotes_minus_downvotes_at_request" = unlist(lapply(meta_data, function(l) l[[25]])),
"requester_upvotes_minus_downvotes_at_retrieval" = unlist(lapply(meta_data, function(l) l[[26]])),
"requester_upvotes_plus_downvotes_at_request" = unlist(lapply(meta_data, function(l) l[[27]])),
"requester_upvotes_plus_downvotes_at_retrieval" = unlist(lapply(meta_data, function(l) l[[28]])),
"requester_username" = unlist(lapply(meta_data, function(l) l[[30]])),
"unix_timestamp_of_request" = unlist(lapply(meta_data, function(l) l[[31]])),
"unix_timestamp_of_request_utc" = unlist(lapply(meta_data, function(l) l[[32]])))
createCoreWords <- function(plainText) {
for_word_cloud_corpus <- Corpus(VectorSource(plainText))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stripWhitespace)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, tolower)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, PlainTextDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, stopwords("english"))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stemDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, c("[request]", "request"))
for_word_cloud_corpus[[1]]$content
}
# Creates a datadrame of the text, and if it was successful. Then splits it into two parts. The first is
# the training data and the second is the validation data.
textOutputDataFrame <- data.frame(meta_dataframe$request_text, meta_dataframe$requester_received_pizza)
trainingTextOutputDataFrame <- textOutputDataFrame[1:(0.75*nrow(textOutputDataFrame)),]
trainingTextOutputDataFrame$meta_dataframe.request_text <- sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
validationTextOutputDataFrame <- textOutputDataFrame[(0.75*nrow(textOutputDataFrame)):(nrow(textOutputDataFrame)),]
validationTextOutputDataFrame$meta_dataframe.request_text <- sapply(validationTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
head(trainingTextOutputDataFrame)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
predictionMatrix <- create_matrix_edited(validationTextOutputDataFrame$meta_dataframe.request_text, originalMatrix=documentTermMatrix)
predSize = length(validationTextOutputDataFrame$meta_dataframe.request_text);
predictionContainer <- create_container(predictionMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
results
sum(results$SVM_LABEL)
head(results)
sum(results$VM_Label == "FALSE")
sum(results$VM_Label == FALSE)
sum(results$SVM_Label == FALSE)
head(results$SVM_LABEL)
sum(results$SVM_LABEL)
sum(results$SVM_LABEL == FALSE)
trainingTextOutputDataFrame[ trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza == TRUE, ]
nrow(trainingTextOutputDataFrame)
sum(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza)
trainingTextOutputDataFrame <- trainingTextOutputDataFrame[ trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza == TRUE, ]
trainingTextOutputDataFrame$meta_dataframe.request_text <- sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
head(container)
container
model <- train_model(container, "SVM", kernel="linear", cost=1)
str(trainingTextOutputDataFrame)
head(trainingTextOutputDataFrame)
rownames(trainingTextOutputDataFrame) <- null
rownames(trainingTextOutputDataFrame) <- NULL
trainingTextOutputDataFrame$meta_dataframe.request_text <- sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
trainingTextOutputDataFrame
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
textOutputDataFrame <- data.frame(meta_dataframe$request_text, meta_dataframe$requester_received_pizza)
trainingTextOutputDataFrame <- textOutputDataFrame[1:(0.75*nrow(textOutputDataFrame)),]
trainingTextOutputDataFrame$meta_dataframe.request_text <- sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
validationTextOutputDataFrame <- textOutputDataFrame[(0.75*nrow(textOutputDataFrame)):(nrow(textOutputDataFrame)),]
validationTextOutputDataFrame$meta_dataframe.request_text <- sapply(validationTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza <- rep(TRUE, length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza))
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza
trainingTextOutputDataFrame <- textOutputDataFrame[1:(0.75*nrow(textOutputDataFrame)),]
trainingTextOutputDataFrame$meta_dataframe.request_text <- sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza <- rep(TRUE, length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza))
validationTextOutputDataFrame <- textOutputDataFrame[(0.75*nrow(textOutputDataFrame)):(nrow(textOutputDataFrame)),]
validationTextOutputDataFrame$meta_dataframe.request_text <- sapply(validationTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
create_matrix_edited <- edit(create_matrix)
predictionMatrix <- create_matrix_edited(validationTextOutputDataFrame$meta_dataframe.request_text, originalMatrix=documentTermMatrix)
predSize = length(validationTextOutputDataFrame$meta_dataframe.request_text);
predictionContainer <- create_container(predictionMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
create_matrix_edited <- edit(create_matrix)
model <- train_model(container, "SVM", kernel="linear", cost=1)
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza <- rep("TRUE", length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza))
validationTextOutputDataFrame <- textOutputDataFrame[(0.75*nrow(textOutputDataFrame)):(nrow(textOutputDataFrame)),]
validationTextOutputDataFrame$meta_dataframe.request_text <- sapply(validationTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
trainingTextOutputDataFrame
textOutputDataFrame <- data.frame(meta_dataframe$request_text, meta_dataframe$requester_received_pizza)
trainingTextOutputDataFrame <- textOutputDataFrame[1:(0.75*nrow(textOutputDataFrame)),]
trainingTextOutputDataFrame$meta_dataframe.request_text <- sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza <- rep("TRUE", length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza))
validationTextOutputDataFrame <- textOutputDataFrame[(0.75*nrow(textOutputDataFrame)):(nrow(textOutputDataFrame)),]
validationTextOutputDataFrame$meta_dataframe.request_text <- sapply(validationTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
rep("TRUE", length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza))
trainingTextOutputDataFrame$meta_dataframe.request_text <- sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza <- rep("TRUE", length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza))
trainingTextOutputDataFrame
textOutputDataFrame <- data.frame(meta_dataframe$request_text, meta_dataframe$requester_received_pizza)
trainingTextOutputDataFrame <- textOutputDataFrame[1:(0.75*nrow(textOutputDataFrame)),]
trainingTextOutputDataFrame$meta_dataframe.request_text <- sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
validationTextOutputDataFrame <- textOutputDataFrame[(0.75*nrow(textOutputDataFrame)):(nrow(textOutputDataFrame)),]
validationTextOutputDataFrame$meta_dataframe.request_text <- sapply(validationTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
textOutputDataFrame <- data.frame(meta_dataframe$request_text, meta_dataframe$requester_received_pizza)
trainingTextOutputDataFrame <- textOutputDataFrame[1:(0.75*nrow(textOutputDataFrame)),]
requestText <- sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
requesterRecievedPizza <- rep("TRUE", length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza))
trainingTextOutputDataFrame <- data.frame(requestText, requesterRecievedPizza)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$requestText)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$requesterRecievedPizza,
trainSize = 1:length(trainingTextOutputDataFrame$requesterRecievedPizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
head(trainingTextOutputDataFrame)
model <- train_model(container, SVM, kernel="linear", cost=1)
textOutputDataFrame <- data.frame(meta_dataframe$request_text, meta_dataframe$requester_received_pizza)
trainingTextOutputDataFrame <- textOutputDataFrame[1:(0.75*nrow(textOutputDataFrame)),]
requestText <- sapply(trainingTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
requesterRecievedPizza <- trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza
trainingTextOutputDataFrame <- data.frame(requestText, requesterRecievedPizza)
validationTextOutputDataFrame <- textOutputDataFrame[(0.75*nrow(textOutputDataFrame)):(nrow(textOutputDataFrame)),]
validationTextOutputDataFrame$meta_dataframe.request_text <- sapply(validationTextOutputDataFrame$meta_dataframe.request_text, createCoreWords)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$requestText)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$requesterRecievedPizza,
trainSize = 1:length(trainingTextOutputDataFrame$requesterRecievedPizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
trainingLength <- length(trainingTextOutputDataFrame$requesterRecievedPizza)
trainingLength <- length(trainingTextOutputDataFrame$requesterRecievedPizza)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$requesterRecievedPizza,
trainSize = 1:(trainingLength/2),
testSize = (trainingLength/2 + 1):trainingLength
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$requesterRecievedPizza,
trainSize = 1:(trainingLength/2),
testSize = (trainingLength/2 + 1):trainingLength
virgin=FALSE)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$requesterRecievedPizza,
trainSize = 1:(trainingLength/2),
testSize = (trainingLength/2 + 1):trainingLength,
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
predictionMatrix <- create_matrix_edited(validationTextOutputDataFrame$meta_dataframe.request_text, originalMatrix=documentTermMatrix)
predSize = length(validationTextOutputDataFrame$meta_dataframe.request_text);
predictionContainer <- create_container(predictionMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
results
sum(results$SVM_LABEL == FALSE)
results[results$SVM_LABEL == TRUE,]
validationTextOutputDataFrame
results[results$SVM_LABEL == TRUE,]
validationTextOutputDataFrame[173]
validationTextOutputDataFrame[173,]
validationTextOutputDataFrame[405,]
results[173,]
