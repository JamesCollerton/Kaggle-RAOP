print(Cit1[i,])
}
}
curve(dnorm(x,mean=0,sd=1),col="darkgreen",xlim=c(-4,8),ylim=c(0,.8))
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,.6))
curve(dnorm(x,mean = 0.5,sd=0.5),col="black",xlim = c(-2,8), ylim =c(0,1))
curve(dnorm(x,mean=0,sd=1),col="darkgreen",xlim=c(-4,8),ylim=c(0,.8))
par(new = True)
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,.6))
par(new = True)
curve(dnorm(x,mean = 0.5,sd=0.5),col="black",xlim = c(-2,8), ylim =c(0,1))
curve(dnorm(x,mean=0,sd=1),col="darkgreen",xlim=c(-4,8),ylim=c(0,.8))
par(new = TRUE)
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,.6))
par(new = TRUE)
curve(dnorm(x,mean = 0.5,sd=0.5),col="black",xlim = c(-2,8), ylim =c(0,1))
curve(dnorm(x,mean=0,sd=1),col="darkgreen",xlim=c(-5,8),ylim=c(0,1))
par(new = TRUE)
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1))
par(new = TRUE)
curve(dnorm(x,mean = 0.5,sd=0.5),col="black",xlim = c(-5,8), ylim =c(0,1))
curve(dnorm(x,mean=0,sd=1),col="darkgreen",xlim=c(-5,8),ylim=c(0,1), ylab = "")
par(new = TRUE)
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
par(new = TRUE)
curve(dnorm(x,mean = 0.5,sd=0.5),col="black",xlim = c(-5,8), ylim =c(0,1), ylab = "")
curve(dnorm(x,mean=0,sd=1),col="darkgreen",xlim=c(-5,8),ylim=c(0,1), ylab = "")
lines(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
lines(dnorm(x,mean = 0.5,sd=0.5),col="black",xlim = c(-5,8), ylim =c(0,1), ylab = "")
dnorm(x,mean = 0,sd=1.5)
curve(dnorm(x,mean=0,sd=1),col="darkgreen",xlim=c(-5,8),ylim=c(0,1), ylab = "")
curve(dnorm(x,mean=0,sd=1),col="darkgreen",xlim=c(-5,8),ylim=c(0,1), ylab = "")
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
curve(dnorm(x,mean = 0.5,sd=0.5),col="black",xlim = c(-5,8), ylim =c(0,1), ylab = "")
curve(dnorm(x,mean = 0,sd=1),col="darkgreen",xlim=c(-5,8),ylim=c(0,1), ylab = "")
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
curve(dnorm(x,mean = 0.5,sd=0.5),col="black",xlim = c(-5,8), ylim =c(0,1), ylab = "")
curve(dnorm(x,mean = 0,sd=1),col="darkgreen",xlim=c(-5,8),ylim=c(0,1), ylab = "")
par(new = TRUE)
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
par(new = TRUE)
curve(dnorm(x,mean = 0.5,sd=0.5),col="black",xlim = c(-5,8), ylim =c(0,1), ylab = "")
curve(dnorm(0,mean=0,sd=1),col="darkgreen",xlim=c(-5,8),ylim=c(0,1), ylab = "")
lines(dnorm(0,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
lines(dnorm(0,mean = 0.5,sd=0.5),col="black",xlim = c(-5,8), ylim =c(0,1), ylab = "")
curve(dnorm(x,mean=0,sd=1),col="darkgreen",xlim=c(-5,8),ylim=c(0,1), ylab = "")
lines(dnorm(0,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
lines(dnorm(0,mean = 0.5,sd=0.5),col="black",xlim = c(-5,8), ylim =c(0,1), ylab = "")
lines(dnorm(c(-5.8),mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
lines(dnorm(c(-5,8),mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
lines(dnorm(c(-5,8),mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
curve(dnorm(x,mean=0,sd=1),col="darkgreen",xlim=c(-4,8),ylim=c(0,1), ylab = "")
lines(dnorm(c(-5,8),mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
curve(dnorm(c(-5,8),mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-4,8),ylim=c(0,1), ylab = "")
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-5,8),ylim=c(0,1), ylab = "")
curve(dnorm(x,mean = 0,sd=1.5),col="red",xlim = c(-4,8),ylim=c(0,1), ylab = "")
week <- c(0, 1, 2, 2)
amount <- c(0, 1, 2, 2)
dataframe <- data.frame(week, amount)
aggregate(dataframe, dataframe$week, sum)
aggregate(dataframe, list(dataframe$week), sum)
source('~/.active-rstudio-document', echo=TRUE)
test
mean(data.frame[X])
mean(test$X)
mean(test[type == 2]$X)
test$type == 2
mean(test[test$type == 2]$X)
which(test$type == 2)
mean(test[which(test$type == 2)]$X)
which(test$type == 2)
test[[which(test$type == 2)]]
test[which(test$type == 2),]
mean(test[which(test$type == 2),]$X)
component <- c("A", "B", "C")
value <- c(1, 2, 3)
test <- data.frame(component, value)
test
component <- c("A", "B", "C")
value <- c(1, 2, 3)
test <- data.frame(component, value)
dataframe_list <- list()
for(comp in test$component){
dataframe[[length(dataframe) + 1]] <-  test[which(test$component == comp),]
}
component <- c("A", "B", "C")
value <- c(1, 2, 3)
test <- data.frame(component, value)
dataframe_list <- list()
for(comp in test$component){
dataframe_list[[length(dataframe_list) + 1]] <-  test[which(test$component == comp),]
}
dataframe[[0]]
dataframe_list[[0]]
dataframe_list[0]
dataframe_list[1]
dataframe_list[2]
component <- c("A", "B", "C")
value <- c(1, 2, 3)
test <- data.frame(component, value)
dataframe_list <- list()
for(comp in test$component){
dataframe_list[[length(dataframe_list)]] <-  test[which(test$component == comp),]
}
dataframe_list[which(dataframe_list$component == "A"),]
dataframe_list[which(dataframe_list$component == "A")]
dataframe_list[[which(dataframe_list$component == "A")]]
[which(dataframe_list$component == "A")
which(dataframe_list$component == "A")
split(test, component)
dataframe_list <- split(test,component)
dataframe_list$A
library(seqinr)
x = read.alignment("proteins.fasta",format="fasta",forceToLower=FALSE)
mylist = x$seq
list.2 = strsplit(mylist, split = NULL)
lapply(list.2, "[", 10) == "L"
install.packages("seqinr")
library(seqinr)
x = read.alignment("proteins.fasta",format="fasta",forceToLower=FALSE)
mylist = x$seq
list.2 = strsplit(mylist, split = NULL)
lapply(list.2, "[", 10) == "L"
proteins.fasta
proteins
data(proteins)
data(proteins.fasta)
el_1 <- c(0, 1, 2, 3)
el_2 <- el_1
el_3 <- el_1
seq <- c("aaaaaaaaaa", "bbbbbbbbbbb", "cccccccccc", "dddddddddd")
x <- data.frame(el_1, el_2, el_3, seq)
x
mylist = x$seq
mylist
mylist[1]
list.2 = strsplit(mylist, split = NULL)
mylist[[1]]
list.2 = strsplit(seq, split = NULL)
list.2
x <- data.frame(c(el_1, el_2, el_3, seq))
x
x <- data.frame(el_1, el_2, el_3, seq)
x
x$seq
x <- data.frame(el_1, el_2, el_3, seq, stringsAsFactors = FALSE)
x$seq
x <- data.frame(el_1, el_2, el_3, seq, stringsAsFactors = FALSE)
mylist = x$seq
list.2 = strsplit(mylist, split = NULL)
list.2
lapply(list.2, "[", 10) == "L"
lapply(list.2, "[", 10) == "b"
a1 <- c(0, 1, 2)
a2 <- c(3, 4, 5)
a3 <- c(6, 7, 8)
csv <- data.frame(a1, a2, a3)
csv
csv[,c("a1", "a3")]
fibonnaci(num_initial_steps){
if(num_initial_steps == 0){ return(0) }
else if(num_initial_steps == 1){ return(1) }
else{ return(fibonacci(num_initial_steps - 1) + fibonacci(num_initial_steps - 2)) }
}
fibonnaci_reg <- function(num_initial_steps){
if(num_initial_steps == 0){ return(0) }
else if(num_initial_steps == 1){ return(1) }
else{ return(fibonacci(num_initial_steps - 1) + fibonacci(num_initial_steps - 2)) }
}
fibonnaci_reg(7)
fibonnaci_reg <- function(num_initial_steps){
if(num_initial_steps == 0){ return(0) }
else if(num_initial_steps == 1){ return(1) }
else{ return(fibonacci_reg(num_initial_steps - 1) + fibonacci_reg(num_initial_steps - 2)) }
}
fibonnaci_reg(7)
fibonacci_reg <- function(num_initial_steps){
if(num_initial_steps == 0){ return(0) }
else if(num_initial_steps == 1){ return(1) }
else{ return(fibonacci_reg(num_initial_steps - 1) + fibonacci_reg(num_initial_steps - 2)) }
}
fibonacci_reg(7)
fibonacci_reg <- function(fib_vec, num_initial_steps){
if(num_initial_steps == 0){
fib_vec[length(fib_vec) + 1] <- 0
return(0)
}
else if(num_initial_steps == 1){
fib_vec[length(fib_vec) + 1] <- 1
return(1)
}
else{
fib_vec[length(fib_vec) + 1] <- num_initial_steps
return(fibonacci_reg(num_initial_steps - 1) + fibonacci_reg(num_initial_steps - 2))
}
}
fibonacci_reg <- function(fib_vec, num_initial_steps){
if(num_initial_steps == 0){
fib_vec[length(fib_vec) + 1] <- 0
return(0)
}
else if(num_initial_steps == 1){
print(fib_vec)
fib_vec[length(fib_vec) + 1] <- 1
return(1)
}
else{
fib_vec[length(fib_vec) + 1] <- num_initial_steps
return(fibonacci_reg(num_initial_steps - 1) + fibonacci_reg(num_initial_steps - 2))
}
}
fibonacci_reg(c(), 7)
empty_vec <- c()
fibonacci_reg(empty_vec, 7)
fibonacci_reg <- function(fib_vec, num_initial_steps){
if(num_initial_steps == 0){
fib_vec[length(fib_vec) + 1] <- 0
return(0)
}
else if(num_initial_steps == 1){
print(fib_vec)
fib_vec[length(fib_vec) + 1] <- 1
return(1)
}
else{
fib_vec[length(fib_vec) + 1] <- num_initial_steps
return(fibonacci_reg(fib_vec, num_initial_steps - 1) + fibonacci_reg(fib_vec, num_initial_steps - 2))
}
}
fibonacci_reg(empty_vec, 7)
difftime(as.Date("2009-10-01 10:00"), as.Date("2009-10-01 9:00"), "hours")
difftime(as.Date("2009-10-01 10:00"), as.Date("2009-10-01 9:00"), units = "hours")
as.Date("2009-10-01 10:00"
as.Date("2009-10-01 10:00")
as.Date("2009-10-01 10:00")
as.POSIXct("2009-10-01 10:00", format="%m/%d/%y %H:%M")
as.POSIXct("2009-10-01 10:00", format="%y/%n/%d %H:%M")
as.POSIXct("2009-10-01 10:00", format="%y-%n-%d %H:%M")
as.POSIXt("2009-10-01 10:00", format="%y-%n-%d %H:%M")
as.POSIXct("2009-10-01 10:00", format="%y-%n-%d %H:%M")
as.POSIXct("2009-10-01 10:00", format="%yyyy-%mm-%dd %HH:%MM")
as.POSIXct(strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 01:30:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 01:30:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-09-01 01:30:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 01:30:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-09-01 01:29:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 01:30:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-09-01 01:28:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 01:30:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-09-01 01:28:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 10:00:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-09-01 09:00:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2009-10-01 10:00:00", "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime("2009-10-01 09:00:00", "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("29/12/2014 10:00:00", "%d/%m/%Y %H:%M:%S")) - as.POSIXct(strptime("29/12/2014 08:00:00", "%d/%m/%Y %H:%M:%S"))
as.POSIXct("2009-10-01 10:00:00", "%Y-%m-%d %H:%M:%S") -
as.POSIXct("2009-10-01 09:00:00", "%Y-%m-%d %H:%M:%S")
as.POSIXct("2009-10-01 10:00:00", "%Y-%m-%d %H:%M:%S") -
as.POSIXct("2009-10-01 09:00:00", "%Y-%m-%d %H:%M:%S")
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- as.dataframe(Date, Value)
dateDataframe <- as.data.frame(Date, Value)
dateDataframe <- as.data.frame(c(Date, Value))
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- as.data.frame(c(Date, Value))
dateDataframe
dateDataframe <- as.data.frame(Date, Value)
Date_Col <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value_Col <- c(0, 1, 2)
dateDataframe <- as.data.frame(Date_Col, Value_Col)
Date_Col <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value_Col <- c(0, 1, 2)
dateDataframe <- as.data.frame(Date_Col, Value_Col, row.names = NULL)
dateDataframe <- data.frame(Date_Col, Value_Col)
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe
dateDataframe%dateDifferences <- diff(dateDataframe$Date)
diff(dateDataframe$Date)
dateDifferences <- as.POSIXct(strptime(dateDataframe$Date, "%Y-%m-%d %H:%M:%S")) - as.POSIXct(strptime(dateDataframe$Date, "%Y-%m-%d %H:%M:%S"))
dateDifferences
dateDifferences <- as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) - as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S"))
dateDifferences
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDifferences <- c(0,
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) )
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe$dateDifferences <- c(0,
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) )
dateDataframe
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe$dateDifferences <- c(0,
as.string(
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) ) )
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe$dateDifferences <- c(0,
toString(
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) ) )
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe$dateDifferences <- c(0,
(
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) ) )
Date <- c("2009-10-01 10:00:00", "2009-10-01 09:00:00", "2009-10-01 08:00:00")
Value <- c(0, 1, 2)
dateDataframe <- data.frame(Date, Value)
dateDataframe$dateDifferences <- c(0,
as.POSIXct(strptime(dateDataframe$Date[1:nrow(dateDataframe) - 1], "%Y-%m-%d %H:%M:%S")) -
as.POSIXct(strptime(dateDataframe$Date[2:nrow(dateDataframe)], "%Y-%m-%d %H:%M:%S")) )
dateDataframe$dateDifferences[1]
dateDataframe$dateDifferences[2]
dateDataframe$dateDifferences[3]
source('~/.active-rstudio-document', echo=TRUE)
plot(BabyECG, col = "cadetblue", type = "l", main = "Baby ECG")
BabyECGwd <- wd(BabyECG, filter.number=10, family="DaubLeAsymm", type="wavelet",
bc="periodic", verbose=FALSE)
#Thresholded BabyECG
BabyECGthresh <- threshold.wd(BabyECGwd, levels = c(10, 9, 8, 7, 6, 5),
type = "hard", policy = "universal", by.level = "FALSE")
#Inverse DWT of BabyECG
fhat <- wr.wd(BabyECGthresh, start.level = 0)
plot(fhat, col = "cadetblue", type = "l", main = "Baby ECG", lwd = 1.5,
ylab = " ")
source('~/.active-rstudio-document', echo=TRUE)
#Sets working directory to the relevant space and brings up the appropriate library.
# required_packages <- c("tm", "rjson", "KernSmooth", "SnowballC", "wordcloud", "httr", "XML", "RCurl")
# install.packages(required_packages)
install.packages("RCurl")
library('tm')
library("rjson")
library("KernSmooth")
library('SnowballC')
library('wordcloud')
library('httr')
library('XML')
library('RCurl')
setwd("~/Documents/Programming/Git_Folders/Kaggle-RAOP/Updated_Attempt/Data")
#Reads in the relevant .json file
meta_data <- fromJSON(file = "train.json")
#This part just makes a nice dataframe and gives nice titles.
meta_dataframe <- data.frame("giver_username_if_known" = unlist(lapply(meta_data, function(l) l[[1]])),
"number_of_downvotes_of_request_at_retrieval" = unlist(lapply(meta_data, function(l) l[[2]])),
"number_of_upvotes_of_request_at_retrieval" = unlist(lapply(meta_data, function(l) l[[3]])),
"post_was_edited" = unlist(lapply(meta_data, function(l) l[[4]])),
"request_id" = unlist(lapply(meta_data, function(l) l[[5]])),
"request_number_of_comments_at_retrieval" = unlist(lapply(meta_data, function(l) l[[6]])),
"request_text" = unlist(lapply(meta_data, function(l) l[[7]])),
"request_text_edit_aware" = unlist(lapply(meta_data, function(l) l[[8]])),
"request_title" = unlist(lapply(meta_data, function(l) l[[9]])),
"requester_account_age_in_days_at_request" = unlist(lapply(meta_data, function(l) l[[10]])),
"requester_account_age_in_days_at_retrieval" = unlist(lapply(meta_data, function(l) l[[11]])),
"requester_days_since_first_post_on_raop_at_request" = unlist(lapply(meta_data, function(l) l[[12]])),
"requester_days_since_first_post_on_raop_at_retrieval" = unlist(lapply(meta_data, function(l) l[[13]])),
"requester_number_of_comments_at_request" = unlist(lapply(meta_data, function(l) l[[14]])),
"requester_number_of_comments_at_retrieval" = unlist(lapply(meta_data, function(l) l[[15]])),
"requester_number_of_comments_in_raop_at_request" = unlist(lapply(meta_data, function(l) l[[16]])),
"requester_number_of_comments_in_raop_at_retrieval" = unlist(lapply(meta_data, function(l) l[[17]])),
"requester_number_of_posts_at_request" = unlist(lapply(meta_data, function(l) l[[18]])),
"requester_number_of_posts_at_retrieval" = unlist(lapply(meta_data, function(l) l[[19]])),
"requester_number_of_posts_on_raop_at_request" = unlist(lapply(meta_data, function(l) l[[20]])),
"requester_number_of_posts_on_raop_at_retrieval" = unlist(lapply(meta_data, function(l) l[[21]])),
"requester_number_of_subreddits_at_request" = unlist(lapply(meta_data, function(l) l[[22]])),
"requester_received_pizza" = unlist(lapply(meta_data, function(l) l[[23]])),
"requester_upvotes_minus_downvotes_at_request" = unlist(lapply(meta_data, function(l) l[[25]])),
"requester_upvotes_minus_downvotes_at_retrieval" = unlist(lapply(meta_data, function(l) l[[26]])),
"requester_upvotes_plus_downvotes_at_request" = unlist(lapply(meta_data, function(l) l[[27]])),
"requester_upvotes_plus_downvotes_at_retrieval" = unlist(lapply(meta_data, function(l) l[[28]])),
"requester_username" = unlist(lapply(meta_data, function(l) l[[30]])),
"unix_timestamp_of_request" = unlist(lapply(meta_data, function(l) l[[31]])),
"unix_timestamp_of_request_utc" = unlist(lapply(meta_data, function(l) l[[32]])))
head(meta_data)
# Sets working directory to the relevant space and brings up the appropriate library.
source('~/Documents/Programming/Git_Folders/Kaggle-RAOP/Updated_Attempt/RAOP_TextClassifier.R', echo=TRUE)
install.packages("RTextTools")
library('RTextTools')
textOutputDataFrame <- data.frame(meta_dataframe$request_text, meta_dataframe$requester_received_pizza)
head(textOutputDataFrame)
textOutputDataFrame <- data.frame(meta_dataframe$request_text, meta_dataframe$requester_received_pizza)
trainingTextOutputDataFrame <- textOutputDataFrame[1:0.75*nrow(textOutputDataFrame),]
validationTextOutputDataFrame <- textOutputDataFrame[0.75*nrow(textOutputDataFrame):nrow(textOutputDataFrame),]
head(trainingTextOutputDataFrame)
nrow(trainingTextOutputDataFrame)
trainingTextOutputDataFrame <- textOutputDataFrame[1:(0.75*nrow(textOutputDataFrame)),]
trainingTextOutputDataFrame
nrow(trainingTextOutputDataFrame)
validationTextOutputDataFrame <- textOutputDataFrame[0.75*nrow(textOutputDataFrame):nrow(textOutputDataFrame),]
nrow(validationTextOutputDataFrame)
validationTextOutputDataFrame <- textOutputDataFrame[(0.75*nrow(textOutputDataFrame)):(nrow(textOutputDataFrame)),]
nrow(validationTextOutputDataFrame)
documentTermMatrix <- create_matrix(data["Text"])
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
documentTermMatrix
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
data$meta_dataframe.requester_recieved_pizza,
trainSize = 1:nrow(trainingTextOutputDataFrame), virgin=FALSE)
container <- create_container(documentTermMatrix,
data$meta_dataframe.requester_recieved_pizza,
trainSize = (1:nrow(trainingTextOutputDataFrame)), virgin=FALSE)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza,
trainSize = (1:nrow(trainingTextOutputDataFrame)), virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
container
model <- train_model(container, "SVM", kernel="linear", cost=1)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame["meta_dataframe.request_text"])
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza,
trainSize = (1:nrow(trainingTextOutputDataFrame)), virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
trainingTextOutputDataFrame["meta_dataframe.request_text"]
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza,
trainSize = (1:nrow(trainingTextOutputDataFrame)), virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza,
trainSize = (1:nrow(trainingTextOutputDataFrame)), virgin=FALSE)
head(container)
container
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza,
trainSize = 1:10, virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza,
trainSize = 1:100, virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
nrow(trainingTextOutputDataFrame$meta_dataframe.request_text)
nrow(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza)
length(trainingTextOutputDataFrame$meta_dataframe.request_text)
length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza)
str(container)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
1:length(trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza)
length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza)
1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza,
trainSize = (1:length(trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza)),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
(1:length(trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza))
1:length(trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza)
1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza)
1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza)
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
str(container)
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza
trainingTextOutputDataFrame$meta_dataframe.requester_recieved_pizza
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza
documentTermMatrix <- create_matrix(trainingTextOutputDataFrame$meta_dataframe.request_text)
container <- create_container(documentTermMatrix,
trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza,
trainSize = 1:length(trainingTextOutputDataFrame$meta_dataframe.requester_received_pizza),
virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
predictionMatrix <- create_matrix(validationTextOutputDataFrame, originalMatrix=documentTermMatrixMatrix)
predictionMatrix <- create_matrix(validationTextOutputDataFrame, originalMatrix=documentTermMatrix)
predictionMatrix <- create_matrix(validationTextOutputDataFrame$meta_dataframe.request_text, originalMatrix=documentTermMatrix)
predictionMatrix <- create_matrix(validationTextOutputDataFrame$meta_dataframe.request_text)
predictionMatrix <- create_matrix(validationTextOutputDataFrame$meta_dataframe.request_text)
predSize = length(validationTextOutputDataFrame$meta_dataframe.request_text);
predictionContainer <- create_container(predictionMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
.libPaths
.libPaths()
trace("create_matrix",edit=TRUE)
predictionMatrix <- create_matrix(validationTextOutputDataFrame$meta_dataframe.request_text, originalMatrix=documentTermMatrix)
predSize = length(validationTextOutputDataFrame$meta_dataframe.request_text);
predictionContainer <- create_container(predictionMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
results
head(results)
sum(results$SVM_LABEL)
sum(results$SVM_LABEL == "FALSE"")
sum(results$SVM_LABEL == "FALSE")
results$SVM_LABEL == "FALSE"
