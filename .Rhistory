dealfun <- function(boxes, offer) {
stopifnot(is.vector(boxes), length(boxes) <= 22)
if( length(boxes) == 1)
return("THE GAME HAS FINISHED!")
worth <- mean(boxes)
if( worth < offer )
return("ACCEPT")
if( worth > offer )
return("REJECT")
}
simulation <- function(N){
x <- c(0.01, 0.1, 0.5, 1, 5, 10, 50, 100, 250, 500, 750, 1000, 3000, 5000,
10000, 15000, 20000, 35000, 50000, 75000, 100000, 250000)
boxvalue <- sample(x, size = 1)
mybox <- boxvalue
x <- x[ x != mybox]
x
boxchoice1 <- sample(x, size = 5)
z <- boxchoice1
x <- x[ x != z[1] & x != z[2] & x != z[3] & x != z[4] & x != z[5]]
x
bankeroffer1 <- 0.7*mean(x)
result1 <- dealfun(c(mybox, x), bankeroffer1)
boxchoice2 <- sample(x, size = 3)
z <- boxchoice2
x <- x[ x != z[1] & x != z[2] & x != z[3]]
x
odds <- seq(from = -0.1, to = 0.2, by = 0.01)
q <- sample(odds, size = 1)
bankeroffer2 <- (1 - q)*mean(x)
result2 <- dealfun(c(mybox, x), bankeroffer2)
boxchoice3 <- sample(x, size = 3)
z <- boxchoice3
x <- x[ x != z[1] & x != z[2] & x != z[3]]
x
odds <- seq(from = -0.1, to = 0.2, by = 0.01)
q <- sample(odds, size = 1)
bankeroffer3 <- (1 - q)*mean(x)
result3 <- dealfun(c(mybox, x), bankeroffer3)
boxchoice4 <- sample(x, size = 3)
z <- boxchoice4
x <- x[ x != z[1] & x != z[2] & x != z[3]]
x
odds <- seq(from = -0.1, to = 0.2, by = 0.01)
q <- sample(odds, size = 1)
bankeroffer4 <- (1 - q)*mean(x)
result4 <- dealfun(c(mybox, x), bankeroffer4)
boxchoice5 <- sample(x, size = 5)
z <- boxchoice5
x <- x[ x != z[1] & x != z[2] & x != z[3]]
x
odds <- seq(from = -0.1, to = 0.2, by = 0.01)
q <- sample(odds, size = 1)
bankeroffer5 <- (1 - q)*mean(x)
result5 <- dealfun(c(mybox, x), bankeroffer5)
boxchoice6 <- sample(x, size = 3)
z <- boxchoice6
x <- x[ x != z[1] & x != z[2] & x != z[3]]
x
odds <- seq(from = -0.1, to = 0.2, by = 0.01)
q <- sample(odds, size = 1)
bankeroffer6 <- (1 - q)*mean(x)
result6 <- dealfun(c(mybox, x), bankeroffer6)
z <- max(bankeroffer1, bankeroffer2, bankeroffer3, bankeroffer4,
bankeroffer5, bankeroffer6)
if(result1 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 1", bankeroffer1, mybox))}
else if(result2 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 2", bankeroffer2, mybox))}
else if(result3 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 3", bankeroffer3, mybox))}
else if(result4 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 4", bankeroffer4, mybox))}
else if(result5 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 5", bankeroffer5, mybox))}
else if(result6 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 6", bankeroffer6, mybox))}
else if(result6 == "REJECT")
{return(c("STUCK WITH MY BOX", mybox, z))}
}
for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
z
p
q
print(p > q)
}
t <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
z
p
q
print(p > q)
}
length(t)
t <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q)
1
else(0)
}
t
t <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q) {1}
else{0}
}
t
for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q) {1}
else{0}
}
t <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q) {return(1)}
else{return(0)}
}
t <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q) {print(1)}
else{print(0)}
}
t
t <- as.vector(for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q) {print(1)}
else{print(0)}
} )
t
t <- function(p,q){
if(p > q) {print(1)}
else{print(0)
}
for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
}
t <- function(p,q){
if(p > q) {print(1)}
else{print(0)}
}
for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
t <- function(p,q){
if(p > q) {print(1)}
else{print(0)}
}
for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
}
r <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
}
r
r <- {
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
}
r
rep(r, 100)
r <- function(i){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
}
rep(r(1), 100)
rep(r(1), 1000)
r(1)
r(1)
r(1)
r(1)
r(1)
r(1)
w <- sapply(1:100, r)
w <- sapply(1:100, r, simplify = TRUE)
w <- sapply(1:100, r, simplify = FALSE)
?sapply
w <- replicate(r, simplify = TRUE)
w <- replicate(r, n = 100, simplify = TRUE)
w
q()
source('~/R/KagglePizzaProblem/R Code (1).R', echo=TRUE)
head(meta_dataframe)
cor(meta_dataframe$giver_username_if_known)
cor(meta_dataframe$giver_username_if_known, meta_dataframe$requester_received_pizza)
cor(meta_dataframe$number_of_downvotes_of_request_at_retrieval, meta_dataframe$requester_received_pizza)
cor(meta_dataframe$number_of_upvotes_of_request_at_retrieval, meta_dataframe$requester_received_pizza)
head(meta_dataframe[1])
which(meta_dataframe == numeric)
which(meta_dataframe[,1] == numeric)
which(typeof(meta_dataframe[,1]) == numeric)
typeof(meta_dataframe[,1])
typeof(meta_dataframe[1])
typeof(meta_dataframe[1,])
meta_dataframe[,1]
meta_dataframe[1,]
typeof(meta_dataframe[1,])
for (x in meta_dataframe[1,]){return typeof(x)}
for (x in meta_dataframe[1,]){return(typeof(x))}
for (x %in% meta_dataframe[1,]){return(typeof(x))}
str(meta_dataframe[1,])
meta_dataframe[1,] == numeric
as.vector(meta_dataframe[1,])
unlist(meta_dataframe[1,])
unlist(meta_dataframe[1,])[1]
unlist(meta_dataframe[1,])[1] == numeric
typeof(unlist(meta_dataframe[1,])[1]) == numeric
typeof(unlist(meta_dataframe[1,])[1]) == "numeric
""
typeof(unlist(meta_dataframe[1,])[1]) == "numeric"
typeof(unlist(meta_dataframe[1,])) == "numeric"
test_vec = meta_dataframe[1,]
which(test_vec == "numeric")
which(test_vec == "string")
which(typeof(test_vec) == "string")
which(typeof(test_vec) == "numeric")
test_vec = unlit(test_vec)
test_vec = unlist(test_vec)
which(typeof(test_vec) == "numeric")
str(test_ve)
str(test_vec)
str(meta_dataframe)
ls(test_vec)
get(test_vec)
typeof(get(test_vec))
sapply(test_vec, typeof)
?double
sapply(meta_dataframe[1,], typeof)
str(meta_dataframe)
class(meta_dataframe[1,])
class(meta_dataframe[1,1])
class(meta_dataframe[1,2])
class(meta_dataframe[1,3])
which(class(meta_dataframe[,1]) == "numeric")
class(meta_dataframe[,1]) == "numeric"
for (i in 1:length(meta_dataframe[1,])){}
