dealfun <- function(boxes, offer) {
stopifnot(is.vector(boxes), length(boxes) <= 22)
if( length(boxes) == 1)
return("THE GAME HAS FINISHED!")
worth <- mean(boxes)
if( worth < offer )
return("ACCEPT")
if( worth > offer )
return("REJECT")
}
simulation <- function(N){
x <- c(0.01, 0.1, 0.5, 1, 5, 10, 50, 100, 250, 500, 750, 1000, 3000, 5000,
10000, 15000, 20000, 35000, 50000, 75000, 100000, 250000)
boxvalue <- sample(x, size = 1)
mybox <- boxvalue
x <- x[ x != mybox]
x
boxchoice1 <- sample(x, size = 5)
z <- boxchoice1
x <- x[ x != z[1] & x != z[2] & x != z[3] & x != z[4] & x != z[5]]
x
bankeroffer1 <- 0.7*mean(x)
result1 <- dealfun(c(mybox, x), bankeroffer1)
boxchoice2 <- sample(x, size = 3)
z <- boxchoice2
x <- x[ x != z[1] & x != z[2] & x != z[3]]
x
odds <- seq(from = -0.1, to = 0.2, by = 0.01)
q <- sample(odds, size = 1)
bankeroffer2 <- (1 - q)*mean(x)
result2 <- dealfun(c(mybox, x), bankeroffer2)
boxchoice3 <- sample(x, size = 3)
z <- boxchoice3
x <- x[ x != z[1] & x != z[2] & x != z[3]]
x
odds <- seq(from = -0.1, to = 0.2, by = 0.01)
q <- sample(odds, size = 1)
bankeroffer3 <- (1 - q)*mean(x)
result3 <- dealfun(c(mybox, x), bankeroffer3)
boxchoice4 <- sample(x, size = 3)
z <- boxchoice4
x <- x[ x != z[1] & x != z[2] & x != z[3]]
x
odds <- seq(from = -0.1, to = 0.2, by = 0.01)
q <- sample(odds, size = 1)
bankeroffer4 <- (1 - q)*mean(x)
result4 <- dealfun(c(mybox, x), bankeroffer4)
boxchoice5 <- sample(x, size = 5)
z <- boxchoice5
x <- x[ x != z[1] & x != z[2] & x != z[3]]
x
odds <- seq(from = -0.1, to = 0.2, by = 0.01)
q <- sample(odds, size = 1)
bankeroffer5 <- (1 - q)*mean(x)
result5 <- dealfun(c(mybox, x), bankeroffer5)
boxchoice6 <- sample(x, size = 3)
z <- boxchoice6
x <- x[ x != z[1] & x != z[2] & x != z[3]]
x
odds <- seq(from = -0.1, to = 0.2, by = 0.01)
q <- sample(odds, size = 1)
bankeroffer6 <- (1 - q)*mean(x)
result6 <- dealfun(c(mybox, x), bankeroffer6)
z <- max(bankeroffer1, bankeroffer2, bankeroffer3, bankeroffer4,
bankeroffer5, bankeroffer6)
if(result1 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 1", bankeroffer1, mybox))}
else if(result2 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 2", bankeroffer2, mybox))}
else if(result3 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 3", bankeroffer3, mybox))}
else if(result4 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 4", bankeroffer4, mybox))}
else if(result5 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 5", bankeroffer5, mybox))}
else if(result6 == "ACCEPT")
{return(c("ACCEPTED AT ROUND 6", bankeroffer6, mybox))}
else if(result6 == "REJECT")
{return(c("STUCK WITH MY BOX", mybox, z))}
}
for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
z
p
q
print(p > q)
}
t <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
z
p
q
print(p > q)
}
length(t)
t <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q)
1
else(0)
}
t
t <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q) {1}
else{0}
}
t
for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q) {1}
else{0}
}
t <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q) {return(1)}
else{return(0)}
}
t <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q) {print(1)}
else{print(0)}
}
t
t <- as.vector(for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
if(p > q) {print(1)}
else{print(0)}
} )
t
t <- function(p,q){
if(p > q) {print(1)}
else{print(0)
}
for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
}
t <- function(p,q){
if(p > q) {print(1)}
else{print(0)}
}
for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
t <- function(p,q){
if(p > q) {print(1)}
else{print(0)}
}
for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
}
r <- for( i in 1:100){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
}
r
r <- {
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
}
r
rep(r, 100)
r <- function(i){
z <- simulation(1)
p <- as.numeric(z[2])
q <- as.numeric(z[3])
t(p, q)
}
rep(r(1), 100)
rep(r(1), 1000)
r(1)
r(1)
r(1)
r(1)
r(1)
r(1)
w <- sapply(1:100, r)
w <- sapply(1:100, r, simplify = TRUE)
w <- sapply(1:100, r, simplify = FALSE)
?sapply
w <- replicate(r, simplify = TRUE)
w <- replicate(r, n = 100, simplify = TRUE)
w
q()
wordcloud(for_word_cloud_corpus, scale = c(4, 1), max.words = 100, colors = brewer.pal(8, "Dark2"))
source('~/R/KagglePizzaProblem/R Code (1).R', echo=TRUE)
for_word_cloud_corpus <- Corpus(VectorSource(all_successful_title_words_table_df$all_successful_title_words))
#cleaning
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stripWhitespace)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, tolower)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, stopwords("english"))
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, stemDocument)
for_word_cloud_corpus <- tm_map(for_word_cloud_corpus, removeWords, c("[request]", "request"))
wordcloud(for_word_cloud_corpus, scale = c(4, 1), max.words = 100, colors = brewer.pal(8, "Dark2"))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
all_failed_title_words_table_df
head(all_failed_title_words_table_df)
tail(all_failed_title_words_table_df)
tail(all_successful_title_words_table_df)
tail(all_failed_title_words_table_df, 100)
tail(all_successful_title_words_table_df, 100)
inspect(for_word_cloud_corpus)
col1 = all_failed_title_words_table_df[order(all_failed_title_words_table_df$all_failed_title_words),]
col2 = all_successful_title_words_table_df[order(all_successful_title_words_table_df$all_successful_title_words),]
head(data.frame(col1, col2))
col1 = col1[1:nrow(col2),]
head(data.frame(col1, col2))
tail(data.frame(col1, col2))
col1 = all_failed_title_words_table_df[order(all_failed_title_words_table_df$Freq),]
col2 = all_successful_title_words_table_df[order(all_successful_title_words_table_df$Freq),]
col1 = col1[1:nrow(col2),]
tail(data.frame(col1, col2))
head(data.frame(col1, col2))
col1 = col1[nrow(col1)-nrow(col2):nrow(col1),]
head(data.frame(col1, col2))
col1 = all_failed_title_words_table_df[order(all_failed_title_words_table_df$Freq),]
col2 = all_successful_title_words_table_df[order(all_successful_title_words_table_df$Freq),]
col1 = col1[nrow(col1)-nrow(col2):nrow(col1),]
head(data.frame(col1, col2))
col1 = all_failed_title_words_table_df[order(all_failed_title_words_table_df$Freq),]
col2 = all_successful_title_words_table_df[order(all_successful_title_words_table_df$Freq),]
col1 = col1[(nrow(col1)-nrow(col2)):nrow(col1),]
head(data.frame(col1, col2))
col1 = all_failed_title_words_table_df[order(all_failed_title_words_table_df$Freq),]
col2 = all_successful_title_words_table_df[order(all_successful_title_words_table_df$Freq),]
col1 = col1[(nrow(col1)-nrow(col2)-1):nrow(col1),]
head(data.frame(col1, col2))
col1 = all_failed_title_words_table_df[order(all_failed_title_words_table_df$Freq),]
col2 = all_successful_title_words_table_df[order(all_successful_title_words_table_df$Freq),]
col1 = col1[(nrow(col1)-nrow(col2)+1):nrow(col1),]
head(data.frame(col1, col2))
tail(data.frame(col1, col2))
tail(data.frame(col1, col2), 40)
top_failed_words = all_failed_title_words_table_df[order(all_failed_title_words_table_df$Freq),]
top_successful_words = all_successful_title_words_table_df[order(all_successful_title_words_table_df$Freq),]
top_failed_words = top_failed_words[(nrow(top_failed_words)-nrow(top_succesful_words)+1):nrow(top_failed_words),]
top_failed_words = all_failed_title_words_table_df[order(all_failed_title_words_table_df$Freq),]
top_successful_words = all_successful_title_words_table_df[order(all_successful_title_words_table_df$Freq),]
top_failed_words = top_failed_words[(nrow(top_failed_words)-nrow(top_successful_words)+1):nrow(top_failed_words),]
top_common_words_df = data.frame(top_failed_words, top_successful_words)
just_looking = head(top_common_words_df, 50)
just_looking
just_looking = tail(top_common_words_df, 50)
just_looking
intersect(top_common_words_df$all_failed_title_words, top_common_words_df$all_successful_title_words)
intersect(just_looking$all_failed_title_words, just_looking$all_successful_title_words)
number_of_successful_requests = nrow(failed_requests)
number_of_successful_requests
number_of_failed_requests = nrow(failed_requests)
top_common_words_df$Freq = top_common_words_df$Freq/number_of_failed_requests
top_common_words_df$Freq.1 = top_common_words_df$Freq.1/number_of_successful_requests
tail(top_common_words_df)
number_of_failed_requests
number_of_successful_requests
number_of_successful_requests = nrow(successful_requests)
number_of_failed_requests = nrow(failed_requests)
number_of_failed_requests
number_of_successful_requests
top_common_words_df$Freq = top_common_words_df$Freq/number_of_failed_requests
top_common_words_df$Freq.1 = top_common_words_df$Freq.1/number_of_successful_requests
tail(top_common_words_df)
top_common_words_df$Freq = top_common_words_df$Freq/number_of_failed_requests
top_common_words_df$Freq.1 = paste(top_common_words_df$Freq.1/number_of_successful_requests, number_of_successful_requests)
tail(top_common_words_df)
top_common_words_df$Freq = top_common_words_df$Freq/number_of_failed_requests
top_common_words_df$Freq.1 = paste(top_common_words_df$Freq.1/number_of_successful_requests, number_of_successful_requests, sep = "/")
top_common_words_df$Freq = top_common_words_df$Freq/number_of_failed_requests
top_common_words_df$Freq.1 = paste(top_common_words_df$Freq.1, number_of_successful_requests, sep = "/")
tail(top_common_words_df)
number_of_successful_requests = nrow(successful_requests)
number_of_failed_requests = nrow(failed_requests)
top_common_words_df$Freq = paste(top_common_words_df$Freq, number_of_failed_requests, sep = "/")
top_common_words_df$Freq.1 = paste(top_common_words_df$Freq.1, number_of_successful_requests, sep = "/")
tail(top_common_words_df)
top_failed_words <- all_failed_title_words_table_df[order(all_failed_title_words_table_df$Freq),]
top_successful_words <- all_successful_title_words_table_df[order(all_successful_title_words_table_df$Freq),]
top_failed_words <- top_failed_words[(nrow(top_failed_words)-nrow(top_successful_words)+1):nrow(top_failed_words),]
top_common_words_df <- data.frame(top_failed_words, top_successful_words)
#This didn't actually show that much, I think it would be much better to look at these ideas as proportions.
number_of_successful_requests = nrow(successful_requests)
number_of_failed_requests = nrow(failed_requests)
top_common_words_df$Freq = paste(top_common_words_df$Freq, number_of_failed_requests, sep = "/")
top_common_words_df$Freq.1 = paste(top_common_words_df$Freq.1, number_of_successful_requests, sep = "/")
tail(top_common_words_df)
